package main

import (
	"fmt"
	"math"
)

// Struct for ApproxResult
type ApproxResult struct {
	a, b float64
}

// Struct for CorrelResult
type CorrelResult struct {
	correlation float64
	tValue      float64
}

// Aprox function
func aprox(x, y []float64) ApproxResult {
	n := float64(len(x))

	xSum := 0.0
	ySum := 0.0
	x2Sum := 0.0
	xySum := 0.0

	for i := 0; i < len(x); i++ {
		xSum += x[i]
		ySum += y[i]
		x2Sum += x[i] * x[i]
		xySum += x[i] * y[i]
	}

	a := (n*xySum - xSum*ySum) / (n*x2Sum - xSum*xSum)
	b := (ySum - a*xSum) / n

	return ApproxResult{a, b}
}

// Mean function
func mean(vec []float64) float64 {
	return sum(vec) / float64(len(vec))
}

// Korrel function
func korrel(x, y []float64) CorrelResult {
	xMean := mean(x)
	yMean := mean(y)

	sumXY := 0.0
	sumX2 := 0.0
	sumY2 := 0.0

	for i := 0; i < len(x); i++ {
		sumXY += (x[i] - xMean) * (y[i] - yMean)
		sumX2 += (x[i] - xMean) * (x[i] - xMean)
		sumY2 += (y[i] - yMean) * (y[i] - yMean)
	}

	r := sumXY / (math.Sqrt(sumX2) * math.Sqrt(sumY2))
	t := r * math.Sqrt(float64(len(x)-2)) / math.Sqrt(1-r*r)

	return CorrelResult{r, t}
}

// Coffee function
func coffee(T, Ts, r float64, time int) []float64 {
	temperatures := make([]float64, time+1)

	for t := 0; t <= time; t++ {
		temperature := Ts + (T - Ts) * math.Exp(-r*float64(t))
		temperatures[t] = temperature
	}

	return temperatures
}

// Function to print ApproxResult
func printApproxResult(result ApproxResult) {
	fmt.Println("Approximation Result:")
	fmt.Printf("a: %.6f, b: %.6f\n", result.a, result.b)
}

// Function to print CorrelResult
func printCorrelResult(result CorrelResult) {
	fmt.Println("Correlation Result:")
	fmt.Printf("Correlation: %.6f\n", result.correlation)
	fmt.Printf("T-value: %.6f\n", result.tValue)
}

// Function to print coffee temperatures
func printCoffeeTEMP(temperatures, times []float64) {
	for i := 0; i < len(temperatures); i++ {
		fmt.Printf("Time - %.0f: %.2f C\n", times[i], temperatures[i])
	}
}

// Helper function to calculate sum
func sum(vec []float64) float64 {
	sum := 0.0
	for _, value := range vec {
		sum += value
	}
	return sum
}

// Main function
func main() {
	T := 90.0  // Initial coffee temperature
	Ts := 26.0 // Room temperature
	r := 0.01  // Cooling coefficient
	time := 60 // Time limit in minutes

	// Calculate coffee temperatures
	temperatures := coffee(T, Ts, r, time)

	// Create times slice
	times := make([]float64, time+1)
	for i := range times {
		times[i] = float64(i)
	}

	// Perform approximation and correlation calculations
	approxResult := aprox(times, temperatures)
	correlResult := korrel(times, temperatures)

	// Print results
	printApproxResult(approxResult)
	printCorrelResult(correlResult)
	printCoffeeTEMP(temperatures, times)
}
